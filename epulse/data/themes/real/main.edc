
/*
 * main.edc
 * 
 * Copyright 2015 Dave <dave@mint>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 * 
 * 
 */

//// GENERIC MACROS ///////////////////////////////////////////////////////////
#define ASPECT_FILL(_ASPECT) \
   aspect: _ASPECT _ASPECT; aspect_preference: NONE;
#define TILED_PATTERN(_WIDTH, _HEIGHT) \
   fill { size { relative: 0.0 0.0; offset: _WIDTH _HEIGHT; } }
#define TILED_HORIZ(_WIDTH) \
   fill { size { relative: 0.0 1.0; offset: _WIDTH 0; } }
#define FIXED_SIZE(_WIDTH, _HEIGHT) \
   min: _WIDTH _HEIGHT; max: _WIDTH _HEIGHT; fixed: 1 1;
#define DBG_SHOW(_PART, _R, _G, _B) \
   part { name: "dbg_show"_PART; \
      type: RECT; mouse_events: 0; \
      description { state: "default" 0.0; \
         rel1.to: _PART; rel2.to: _PART; \
         color: _R _G _B 50; } }
#define SHOW(_PART) DBG_SHOW(_PART, 100, 0, 0)


// fonts {
   // font: "example.otf" "Example";
// }

#define FN_COL_DEFAULT 255 255 255 255; color3: 0 0 0 128
#define FN_COL_DISABLE 21 21 21 255; color3: 255 255 255 25;

#define BG_COL 27 57 81 255
#define FG_COL 231 227 215 255

collections {

// ### ELM BACKGROUND ---------------------------------------------------------
group { name: "elm/bg/base/pulse";
   // images.image: "bevel_dark_out.png" COMP;
   parts {
      part { name: "base"; type: RECT;
         description { state: "default" 0.0;
            color_class: "dialog_base";
            // color: 64 64 64 255;
            color: BG_COL;
         }
      }
      part { name: "elm.swallow.rectangle"; type: SWALLOW;
         description { state: "default" 0.0;
         }
      }
      part { name: "elm.swallow.background"; type: SWALLOW;
         description { state: "default" 0.0;
         }
      }
      // part { name: "bevel";
         // description { state: "default" 0.0;
            // image.normal: "bevel_dark_out.png";
            // image.border: 1 1 1 1;
            // image.middle: 0;
            // fill.smooth: 0;
         // }
      // }
      part { name: "elm.swallow.content"; type: SWALLOW;
         description { state: "default" 0.0;
         }
      }
   }
}

// ### ELM FRAME --------------------------------------------------------------
group { name: "elm/frame/base/pulse";
   // images.image: "shadow_square_tiny.png" COMP;
   // images.image: "vgrad_med_curved.png" COMP;
   // images.image: "bevel_out.png" COMP;
   // images.image: "holes_tiny_vert.png" COMP;
   
   images.image: "frame_base.png" COMP;
   parts {
      part { name: "base"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 0.0 1.0;
            rel1.offset: 2 0;
            rel1.to_y: "elm.text";
            rel2.offset: -3 -3;
            color: 0 0 0 0;
         }
      }
      part { name: "frame"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.offset: 2 2;
            rel2.offset: -3 -3;
            image.normal: "frame_base.png";
            image.border: 4 4 26 4;
            // image.middle: 0;
            fill.smooth: 0;
         }
      }
      part { name: "elm.text"; type: TEXT;
         scale: 1;
         // effect: SHADOW BOTTOM;
         description { state: "default" 0.0;
            color_class: "frame";
            // rel1.relative: 1.0 0.0;
            // rel1.offset: 0 4;
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 26;
            align: 0.0 0.0;
            // color: FN_COL_DISABLE;
            color: BG_COL;
            text { font: FNBD; size: 10;
               // text_class: "frame";
               align: 0.5 0.5;
               min: 1 1;
               ellipsis: -1;
            }
            fixed: 0 1;
         }
      }
      part { name: "clip"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 0.0 1.0;
            rel1.offset: 5 0;
            rel1.to_y: "elm.text";
            rel2.offset: -7 -7;
         }
      }
      part { name: "elm.swallow.content"; type: SWALLOW;
         clip_to: "clip";
         description { state: "default" 0.0;
            align: 0.0 1.0;
            rel1.relative: 0.0 1.0;
            rel1.offset: 7 0;
            rel1.to_y: "elm.text";
            rel2.offset: -9 -5;
         }
         description { state: "collapsed" 0.0;
            inherit: "default" 0.0;
            minmul: 1.0 0.0;
         }
      }
      part { name: "event"; type: RECT; ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.to_y: "elm.text";
            rel2.to_y: "elm.text";
         }
      }
   }
   programs {
      program { name: "collapse";
         action:  STATE_SET "collapsed" 0.0;
         target: "elm.swallow.content";
         transition: ACCELERATE 0.3;
         after: "signal";
      }
      program { name: "expand";
         action:  STATE_SET "default" 0.0;
         target: "elm.swallow.content";
         transition: DECELERATE 0.3;
         after: "signal";
      }
      program {
         signal:  "mouse,up,1"; source:  "event";
         action:  SIGNAL_EMIT "elm,action,click" "elm";
      }
      program {
         signal:  "elm,action,toggle"; source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "default"))
              run_program(PROGRAM:"collapse");
            else
              run_program(PROGRAM:"expand");
         }
      }
      program {
         signal:  "elm,action,switch"; source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "default"))
              set_state(PART:"elm.swallow.content", "collapsed", 0.0);
            else
              set_state(PART:"elm.swallow.content", "default", 0.0);
         }
      }
      program { name: "signal";
         action: SIGNAL_EMIT "elm,anim,done" "elm";
      }
   }
}

// ### ELM SLIDER -------------------------------------------------------------
group { name: "elm/slider/hidden/limit";
   parts {
      part { name: "elm.units.min"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            align: 1.0 0.5;
            text { font: FN; size: 10;
               text_class: "slider_text";
               min: 1 1;
               align: 0.0 0.5;
               ellipsis: -1;
            }
         }
      }
      part { name: "elm.units.max"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            align: 1.0 0.5;
            text { font: FN; size: 10;
               text_class: "slider_text";
               min: 1 1;
               align: 0.0 0.5;
               ellipsis: -1;
            }
         }
      }
   }
}
group { name: "elm/slider/vertical/pulse";
   // alias: "elm/slider/vertical/disabled";
   images.image: "slider_base.png" COMP;
   images.image: "slider_knob.png" COMP;
   images.image: "slider_knob_shadow.png" COMP;
#define ICON    1
#define LABEL   2
#define END     4
#define UNITS   8
#define MASK    15
#define INVERT  16
#define DISABLE 32
   script {
      public slmode;
      public eval_mode(m) {
         new ic = m & ICON;
         new l = m & LABEL;
         new e = m & END;
         new u = m & UNITS;
         new d = m & DISABLE;
         new i = m & INVERT;
         if (i) {
            if (!d) {
               set_state(PART:"base", "default", 0.0);
               // set_state(PART:"glow", "inverted", 0.0);
            } else {
               set_state(PART:"base", "disabled", 0.0);
               // set_state(PART:"glow", "disabled_inverted", 0.0);
            }
         } else {
            if (!d) {
               set_state(PART:"base", "default", 0.0);
               // set_state(PART:"glow", "default", 0.0);
            } else {
               set_state(PART:"base", "disabled", 0.0);
               // set_state(PART:"glow", "disabled", 0.0);
            }
         }
         if (l) {
            if (!d) {
               set_state(PART:"elm.text", "visible", 0.0);
            } else {
               set_state(PART:"elm.text", "disabled_visible", 0.0);
            }
         } else {
            set_state(PART:"elm.text", "default", 0.0);
         }
         if (u) {
            if (!d) {
               set_state(PART:"elm.units", "visible", 0.0);
               set_state(PART:"limits", "visible", 0.0);
            } else {
               set_state(PART:"elm.units", "disabled_visible", 0.0);
               set_state(PART:"limits", "disabled_visible", 0.0);
            }
         } else {
            set_state(PART:"elm.units", "default", 0.0);
            set_state(PART:"limits", "default", 0.0);
         }
         if (ic) {
            set_state(PART:"elm.swallow.icon", "visible", 0.0);
            set_state(PART:"sizer.content", "visible", 0.0);
         } else {
            set_state(PART:"elm.swallow.icon", "default", 0.0);
            set_state(PART:"sizer.content", "default", 0.0);
         }
         if (e) {
            set_state(PART:"elm.swallow.end", "visible", 0.0);
            set_state(PART:"sizer.content.end", "visible", 0.0);
         } else {
            set_state(PART:"elm.swallow.end", "default", 0.0);
            set_state(PART:"sizer.content.end", "default", 0.0);
         }
         if (!d) {
            set_state(PART:"event", "default", 0.0);
            set_state(PART:"dis_clip", "default", 0.0);
         } else {
            set_state(PART:"event", "disabled", 0.0);
            set_state(PART:"dis_clip", "disabled", 0.0);
         }
      }
   }
   parts {
      part { name: "elm.swallow.bar"; type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            // min: 21 42;
            // max: 21 99999;
            min: 45 355;
            max: 45 99999;
            // align: 1.0 1.0; // For the double style with long labels... :/
            rel1.to_y: "elm.text";
            rel1.relative: 0.0 1.0;
            // rel1.offset: 1 10;
            rel2.to_y: "limits";
            rel2.relative: 1.0 0.0;
            // rel2.offset: -1 -3;
         }
      }

      part { name: "base"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.bar";
            // rel1.offset: 3 3;
            rel2.to: "elm.swallow.bar";
            image.normal: "slider_base.png";
            // image.border: 0 0 4 4;
            fill.smooth: 0;
            // min: 5 8;
            // max: 5 99999;
            min: 45 355;
            max: 45 355;
            fixed: 1 0;
            
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            // image.normal: "slider_run_base_light_vert.png";
            image.normal: "slider_base.png";
         }
      }
      part { name: "dis_clip"; type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.icon";
            rel2.to: "elm.swallow.end";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
      part { name: "elm.swallow.icon"; type: SWALLOW;
         clip_to: "dis_clip";
         description { state: "default" 0.0;
            visible: 0;
            align: 0.5 0.0;
            rel1.offset: 2 0;
            rel1.to_x: "elm.swallow.bar";
            rel2.offset: -3 -1;
            rel2.relative: 1.0 0.0;
            rel2.to_x: "elm.swallow.bar";
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            aspect: 1.0 1.0; aspect_preference: VERTICAL;
            rel1.offset: 2 2;
            rel2.offset: -3 2;
         }
      }
      part { name: "sizer.content"; type: TEXT; mouse_events:  0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            visible: 0;
            text { font: FN; size: 10;
               min: 0 0;
               text_class: "slider_text";
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            rel1.to: "elm.swallow.icon";
            rel2.to: "elm.swallow.icon";
            text {
               min: 1 1;
               ellipsis: -1;
               text: "M";
            }
         }
      }
      part { name: "elm.text"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.0;
            rel1.to_y: "elm.swallow.icon";
            rel1.relative: 0.0 1.0;
            rel1.offset: 2 -1;
            rel2.to_y: "elm.swallow.icon";
            rel2.relative: 1.0 1.0;
            rel2.offset: -3 -1;
            
            // rel1.relative: 0.0 1.0;
            // rel2.relative: 0.0 1.0;
            color: FG_COL;
            // color_class: "slider_text";
            text { 
               font: FN; size: 10;
               // text_class: "slider";
               // min: 0 1;
               // ellipsis: -1;
               ellipsis: 0;
               // align: 1.0 0.0;
            }
            // map {
               // on: 1;
               // rotation.z: 270;
               // smooth: 0;
            // }
            // align: 0.0 0.0;
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            rel1.offset: 2 2;
            rel2.offset: -3 2;
            text.min: 0 1;
            text.ellipsis: 0;

         }
         description { state: "disabled_visible" 0.0;
            inherit: "visible" 0.0;
            // color_class: "slider_text_disabled";
            // color3: 255 255 255 255;
         }
      }
      part { name: "elm.swallow.end"; type: SWALLOW;
         clip_to: "dis_clip";
         description { state: "default" 0.0;
            visible: 0;
            align: 0.5 1.0;
            rel1.offset: 2 0;
            rel1.relative: 0.0 1.0;
            rel2.offset: -3 -1;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            aspect: 1.0 1.0;
            aspect_preference: VERTICAL;
            rel2.offset: 2 -3;
            rel2.offset: -3 -3;
         }
      }
      part { name: "sizer.content.end"; type: TEXT; mouse_events:  0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            visible: 0;
            text { font: FN; size: 10;
               min: 0 0;
               text_class: "slider_text";
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            rel1.to: "elm.swallow.end";
            rel2.to: "elm.swallow.end";
            text {
               min: 1 1;
               ellipsis: -1;
               text: "M";
            }
         }
      }
      alias: "elm.units.min" "limits:elm.units.min";
      alias: "elm.units.max" "limits:elm.units.max";
      part { name: "limits"; type: GROUP; mouse_events: 0;
         source: "elm/slider/hidden/limit";
         scale: 1;
         description { state: "default" 0.0;
            align: 0.5 1.0;
            fixed: 1 1;
            max: 0 0;
            rel1.to_y: "elm.swallow.end";
            rel1.relative: 0.0 0.0;
            rel1.offset: 2 1;
            rel2.to_y: "elm.swallow.end";
            rel2.relative: 1.0 0.0;
            rel2.offset: -3 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            min: SOURCE;
            rel1.offset: 2 -3;
            rel2.offset: -3 -3;
         }
      }
      part { name: "elm.units"; type: TEXT; mouse_events: 0;
         effect: SHADOW BOTTOM;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            rel1.to_y: "limits";
            rel2.to_y: "limits";
            color: FN_COL_DEFAULT;
            color_class: "slider_text";
            text { font: FN; size: 10;
               text_class: "slider";
               min: 0 0;
               align: 0.5 1.0;
               ellipsis: -1;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            text.min: 1 1;
            text.ellipsis: -1;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "visible" 0.0;
            color_class: "slider_text_disabled";
            color3: 255 255 255 255;
         }
      }
      part { name: "button"; type: GROUP; mouse_events: 0;
         source: "elm/slider/vertical/indicator/default";
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.dragable.slider";
            rel2.to: "elm.dragable.slider";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.dragable.slider"; type: RECT;
         scale: 1;
         dragable.x: 0 0 0;
         dragable.y: 1 1 0;
         dragable.confine: "elm.swallow.bar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            min: 34 78;
            max: 34 78;
            fixed: 1 1;
            rel1.relative: 0.0 0.5;
            rel1.to_x: "elm.swallow.bar";
            rel1.offset: 1 0;
            rel2.relative: 1.0 0.5;
            rel2.to_x: "elm.swallow.bar";
            align: 0.0 0.5;
         }
      }
      part { name: "knob_shadow"; type: IMAGE;
         description { state: "default" 0.0;
            image.normal: "slider_knob_shadow.png";
            image.border: 12 12 12 12;
            image.middle: 0;
            rel1.to: "knob";
            rel1.offset: -3 -4;
            rel2.to: "knob";
            rel2.offset: 8 4;
         }
      }
      part { name: "knob";
         description { state: "default" 0.0;
            image.normal: "slider_knob.png";
            fixed: 1 1;
            min: 34 78;
            step: 2 2;
            max: 34 78;
            rel1.to: "elm.dragable.slider";
            rel1.offset: -4 -4;
            rel2.to: "elm.dragable.slider";
            rel2.offset: 3 3;
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
         }
      }

      // SHOW("knob_shadow")
      part { name: "slideevent"; type: RECT; repeat_events: 1;
         scale: 1;
         ignore_flags: ON_HOLD;
         dragable.events: "elm.dragable.slider";
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.dragable.slider";
            rel2.to: "elm.dragable.slider";
            color: 0 0 0 0;
         }
      }
      part { name: "elm.track.slider"; type: SWALLOW; mouse_events: 0;
         description { state: "default" 0.0;
            max: 0 0;
            rel1.to: "elm.dragable.slider";
            rel2.to: "elm.dragable.slider";
         }
      }
      part { name: "event"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program {
         signal: "mouse,down,1"; source: "elm.dragable.slider";
         action:  STATE_SET "clicked" 0.0;
         target: "knob";
      }
      program {
         signal: "mouse,up,1"; source: "elm.dragable.slider";
         action:  STATE_SET "default" 0.0;
         target: "knob";
      }
      program {
         signal: "elm,state,indicator,show"; source: "elm";
         action:  SIGNAL_EMIT "elm,popup,show" "elm";
         after: "popup_show2";
      }
      program {
         signal: "elm,state,indicator,hide"; source: "elm";
         action:  SIGNAL_EMIT "elm,popup,hide" "elm";
         after: "popup_hide2";
      }
      program {
         signal: "mouse,down,1"; source: "slideevent";
         action:  SIGNAL_EMIT "elm,popup,show" "elm";
         after: "popup_show2";
      }
      program { name: "popup_show2";
         action:  STATE_SET "hidden" 0.0;
         target: "button";
      }
      program {
         signal: "mouse,up,1"; source: "slideevent";
         action:  SIGNAL_EMIT "elm,popup,hide" "elm";
         after: "popup_hide2";
      }
      program { name: "popup_hide2";
         action:  STATE_SET "default" 0.0;
         target: "button";
      }
      program {
         signal: "elm,state,text,visible"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= LABEL; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,text,hidden"; source: "elm";
         script {         
            new m = get_int(slmode);
            m &= ~LABEL; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,icon,visible"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= ICON; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,icon,hidden"; source: "elm";
         script {         
            new m = get_int(slmode);
            m &= ~ICON; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program { name: "end_show";
         signal: "elm,state,end,visible"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= END; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program { name: "end_hide";
         signal: "elm,state,end,hidden"; source: "elm";
         script {         
            new m = get_int(slmode);
            m &= ~END; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,units,visible"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= UNITS; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,units,visible"; source: "elm";
         action: SIGNAL_EMIT "limits:limits,visible" "elm";
      }
      program {
         signal: "elm,state,units,hidden"; source: "elm";
         action:  STATE_SET "default" 0.0;
         script {         
            new m = get_int(slmode);
            m &= ~UNITS; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,units,hidden"; source: "elm";
         action: SIGNAL_EMIT "limits:limits,hide" "elm";
      }
      program {
         signal: "elm,state,inverted,on"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= INVERT; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,inverted,off"; source: "elm";
         script {         
            new m = get_int(slmode);
            m &= ~INVERT; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,disabled"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= DISABLE; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,enabled"; source: "elm";
         script {         
            new m = get_int(slmode);
            m &= ~DISABLE; set_int(slmode, m);
            eval_mode(m);
         }
      }
   }
#undef ICON
#undef LABEL
#undef END
#undef UNITS
#undef MASK
#undef INVERT
#undef DISABLE
}

group { name: "elm/slider/vertical/pulse_double_left";
   inherit: "elm/slider/vertical/pulse";
   images.image: "slider_base_double_left.png" COMP;
   parts {
      part { name: "base"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.bar";
            rel2.to: "elm.swallow.bar";
            rel2.offset: 5 -1;
            image.normal: "slider_base_double_left.png";
            fill.smooth: 0;
            min: 54 355;
            max: 54 355;
            fixed: 1 0;
            align: 1.0 0.0;
            
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            // image.normal: "slider_run_base_light_vert.png";
            image.normal: "slider_base_double_left.png";
         }
      }
      part { name: "elm.text"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.0;
            rel1.to_y: "elm.swallow.icon";
            rel1.relative: 0.0 1.0;
            rel1.offset: 2 2;
            rel2.to_y: "elm.swallow.icon";
            rel2.relative: 1.0 1.0;
            rel2.offset: 40 -1;
            
            color: FG_COL;
            // color_class: "slider_text";
            text { 
               font: FN; size: 10;
               // text_class: "slider";
               // min: 0 1;
               // ellipsis: -1;
               align: 0.5 0.0;
            }
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            // rel2.offset: -3 2;
            text.min: 0 1;
            text.ellipsis: 0;

         }
         description { state: "disabled_visible" 0.0;
            inherit: "visible" 0.0;
            // color_class: "slider_text_disabled";
            // color3: 255 255 255 255;
         }
      }
   }
}

group { name: "elm/slider/vertical/pulse_double_right";
   inherit: "elm/slider/vertical/pulse";
   images.image: "slider_base_double_right.png" COMP;
   parts {
         part { name: "base"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.bar";
            rel2.to: "elm.swallow.bar";
            image.normal: "slider_base_double_right.png";
            fill.smooth: 0;
            min: 46 355;
            max: 46 355;
            fixed: 1 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            // image.normal: "slider_run_base_light_vert.png";
            image.normal: "slider_base_double_right.png";
         }
      }
   }
}
   
group { name: "elm/slider/vertical/indicator/default";
   alias: "elm/slider/vertical/indicator/disabled";
   alias: "elm/slider/vertical/popup/default";
   alias: "elm/slider/vertical/indicator/media_player/position/default";
   alias: "elm/slider/vertical/indicator/media_player/position/flush";
   alias: "elm/slider/vertical/indicator/media_player/volume/default";
   alias: "elm/slider/vertical/indicator/media_player/volume/flush";
   images.image: "darken_rounded_square.png" COMP;
   parts {
      part { name: "base"; type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 16 16;
         }
      }
      part { name: "clip"; type: RECT;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.indicator";
            rel1.offset: -100 -100;
            rel2.to: "elm.indicator";
            rel2.offset: 99 99;
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "bevel"; mouse_events: 0;
         clip_to: "clip";
         description { state: "default" 0.0;
            rel1.offset: -12 -12;
            rel1.to: "elm.indicator";
            rel2.offset: 11 11;
            rel2.to: "elm.indicator";
            image.normal: "darken_rounded_square.png";
            image.border: 15 15 15 15;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.indicator"; type: TEXT; mouse_events: 0;
         clip_to: "clip";
         effect: SHADOW BOTTOM;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            align: 0.0 0.5;
            rel1.to: "base";
            rel1.relative: 1.1 0.0;
            rel1.offset: 11 0;
            rel2.to: "base";
            rel2.relative: 1.1 1.0;
            rel2.offset: 11 -1;
            color_class: "slider_indicator";
            color: FN_COL_DEFAULT;
            text { font: FNBD; size: 10;
               min: 1 1;
               align: 0.0 0.5;
               text_class: "slider_indicator";
               ellipsis: -1;
            }
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program {
         signal: "elm,popup,show"; source: "elm";
         action:  STATE_SET "visible" 0.0;
         target:  "elm.indicator";
         target:  "bevel";
      }
      program {
         signal: "elm,popup,hide"; source: "elm";
         action:  STATE_SET "default" 0.0;
         target:  "elm.indicator";
         target:  "bevel";
      }
      program {
         signal: "elm,popup,hide"; source: "elm";
         action:  SIGNAL_EMIT "elm,popup,hide,done" "elm";
      }
      program {
         signal: "elm,state,val,show"; source: "elm";
         action:  STATE_SET "visible" 0.0;
         target: "clip";
      }
      program {
         signal: "elm,state,val,hide"; source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "clip";
      }
      program {
         signal: "elm,state,indicator,show"; source: "elm";
         action:  STATE_SET "visible" 0.0;
         target:  "elm.indicator";
         target:  "bevel";
      }
      program {
         signal: "elm,state,indicator,hide"; source: "elm";
         action:  STATE_SET "visible" 0.0;
         target:  "elm.indicator";
         target:  "bevel";
      }
      program {
         signal:  "elm,state,disabled"; source: "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "base";
      }
      program {
         signal: "elm,state,enabled"; source: "elm";
         action:  STATE_SET "default" 0.0;
         target:  "base";
      }
   }
}
}
