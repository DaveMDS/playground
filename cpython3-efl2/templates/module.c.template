<!--(include)-->copyright_c.include<!--(end)-->#!
<!--(include)-->macros.include<!--(end)-->#!
#include <Python.h>

#include <Eo.h>
#include <Efl.h>
#include <Ecore.h> // EFL_LOOP_TIMER_CLASS is defined here TODO FIXME

#include "../_efl.module.h"
<!--(for cls in namespace.classes)-->
#include "${cls.name.lower()}$.h"
<!--(end)-->


// #define DBG(...) {}
#define DBG(_fmt_, ...) printf("[%s:%d] "_fmt_"\n", __FILE__, __LINE__, ##__VA_ARGS__);


/* List of functions defined in the module */
static PyMethodDef ThisModuleMethods[] = {
    {NULL, NULL, 0, NULL}        /* Sentinel */
};


/* The module definition */
static struct PyModuleDef ThisModule = {
   PyModuleDef_HEAD_INIT,
   "${('.'.join(list(cls.namespaces)[:-1])).lower()}$._${list(cls.namespaces)[-1].lower()}$",   /* name of module */
   NULL, -1, ThisModuleMethods
};

/* Module init function, func name must match module name! (PyInit_XXX) */
PyMODINIT_FUNC
PyInit__${list(cls.namespaces)[-1].lower()}$(void)
{
    PyObject *m;

    // TODO how can I autogenerate this init call ??
    eina_init(); // TODO check for errors
    ecore_init(); // TODO check for errors
    elm_init(); // TODO check for errors

    /* Import the Efl namespace C API (pyefl_* and types in the efl namespace) */
    if (import_efl() < 0)
        return NULL;

    m = PyModule_Create(&ThisModule);
    if (m == NULL)
        return NULL;

    /* Finalize all the type objects including setting type of the new type
     * object; doing it here is required for portability, too. */
<!--(for cls in namespace.classes)-->
    if (!py${cls.name.lower().replace('.', '_')}$_object_finalize(m)) return NULL;
<!--(end)-->

    return m;
}

